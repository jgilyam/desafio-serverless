service: pagos360
frameworkVersion: '3'

provider:
  name: aws
  runtime: nodejs16.x
  region: us-east-1
  stage: dev
  environment:
    USER_POOL: { Ref: CognitoUserPool }
    USER_POOL_CLIENT: { Ref: CognitoUserPoolClient }
  apiGateway:
    binaryMediaTypes:
      - 'multipart/form-data'
  httpApi:    
    authorizers:
      customAuthorizer:
        type: request
        functionName: authorizerFunc    
  iamRoleStatements:
    - Effect: Allow
      Action:
        - cognito-idp:AdminInitiateAuth
        - cognito-idp:AdminCreateUser
        - cognito-idp:AdminSetUserPassword  
        - cognito-idp:AdminRespondToAuthChallenge
      Resource: "arn:aws:cognito-idp:us-east-1:389418998357:userpool/us-east-1_MCeRLoRRd"
    - Effect: Allow
      Action:
        - s3:ListBucket
        - s3:PutObject 
        - s3:PutObjectAcl
        - s3:GetObject
      Resource: "arn:aws:s3:::desafio360/*"
    - Effect: Allow
      Action:
        - s3:ListBucket
        - s3:GetObject
      Resource: "arn:aws:s3:::desafio360"
    
functions:
  listFiles:
    handler: src/file/infrastructure/lambdas/listFiles.handler
    events:
      - httpApi:
          path: /files/list
          method: get
          authorizer:
            name: customAuthorizer      
    environment:
      BUCKET: desafio360
  uploadFile:
    handler: src/file/infrastructure/lambdas/uploadFile.handler
    events:
      - httpApi:
          path: /files/upload
          method: post
          authorizer:
            name: customAuthorizer      
    environment:
      BUCKET: desafio360
  authorizerFunc:
    handler: src/auth/auth.handler
  login:
    handler: src/auth/login.handler
    events:
      - httpApi:
          path: /login
          method: post

resources:
  Resources:
    MyS3Bucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: desafio360
    CognitoUserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        UserPoolName: ${self:provider.stage}-user-pool
        UsernameAttributes:
          - email
        AutoVerifiedAttributes:
          - email
    CognitoUserPoolClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        ClientName: ${self:provider.stage}-user-pool-client
        UserPoolId:
          Ref: CognitoUserPool
        ExplicitAuthFlows:
          - ADMIN_NO_SRP_AUTH
        GenerateSecret: false    

plugins:
  - serverless-esbuild
